- While sort, using vector<int> is faster vector<pair<int,int>> if only one elements based sorting is needed
- Using array is better than using map/vector


priority_queue
- first elements always greatest/smallest
- default top is greatest
- built on the top of the max heap
- using array/vector for data structure


CONTAINERS
- vector - push_back, back, front, pop_back, size, clear, empty, insert, erase, begin, end, rbegin, rend,
- stack - push, pop, top, size, empty
- queue - push, pop, front, back, size, empty
- priority_queue - push, top, pop
- map - insert, erase, begin, end, clear, size, empty, find
- set - insert, erase, begin, end, clear, size, empty, find, count

map:
- insert, find, erase takes O(logn) time
- size takes O(1) time

map vs unordered_map (similar for set vs unordered_set):
    map:
        1. Implementation - red-black tree.
        2. It is slow.
        3. Time complexity for operations is O(log N)
        4. Ordering - used to store elements as key,value pairs in order sorted by key.
        5. search time - O(logN)
        6. Insertion & Deletion time - O(logN) + Rebalance
    unordered_map:
        1. Implementation - hash table.
        2. It is fast.
        3. Time complexity for operations is O(1)
        4. Ordering - used to store elements as key,value pairs in non-sorted order.
        5. search time - O(1) -> Average, O(N) -> Worst Case
        6. Insertion & Deletion time - O(1) -> Average, O(N) -> Worst Case



set:
- insert, find, erase takes o(logn) time
- size takes O(1) time


STL ALGORITHMS
- sort
- find
- lower_bound
- upper_bound
- max_element
- min_element

TREE TRAVERSALS
- Inorder - Left Root Right
- Preorder - Root Left Right
- Postorder - Left Right Root
- Level order
- Line order
- Morris Traversal - Inorder | Preorder

Some Algortihms
- Kadane's algorithm
    - Purpose:
        - to find Largest subarray sum
    - Time complexity:
        - O(N)
    - Space complexity:
        - O(0)
- Moore's voting algorithm
    - Purpose:
         - to find the element present at least n/2 times
    - Time complexity:
        - O(N)
    - Space complexity:
        - O(0)
- Dutch flag problem
    - Purpose:
        - sort colors: Reds, Whites, Blues (or)  0s 1s & 2s
    - Algo:
        - before left index -> 0s' 
        - after left before mid ->  1's 
        - after mid before right -> 0's, 1's, 2's
        - after right -> 2's
    - Time complexity:
        - O(N)
    - Space complexity:
        - O(0)
- Z Function algorithm
    - Purpose:
        - for a string of len N, it gives an int array of len n, 
            where the i-th element is equal to the greatest number of characters 
            starting from the position i that coincide with the first characters of the string
    - Time complexity:
        - ??? 
    - Space complexity:
        - O(N)
- Topological Sorting
    - Purpose:
        - to get a linear ordering of vertices/nodes such that if there is an edge form u to v, 
            u appears before v in the order
    - Uses in degree
    - using bfs it uses queue
    - using dfs it uses stack
    - can be done only in DAG
    - Time complexity:
        - O(V+E)
    - Space complexity:
        - O(V+E)
- Dijkstra
    - Purpose:
        - get min dist to all nodes from a source in an undirected graph
    - single source
    - cannot be used on directed / negative weight / negative cycle graphs
    - using priority queue - min heap 
        - top contains the vertex which can be visited with least upcoming distance
    - using set
        - can erase the paths to a vertex which is yet to be considered but with greater dist
        - based on graph pq or set Implementation may be efficient
    - Time Complexity:
        - O(E * logV) (or) O(V^2 logV) 
        - at worst case v^2 = E
    - Space Complexity:
        - O(V)
- Bellman Ford
    - Purpose:
        - get min dist to all edges from a source in an directed graph
    - single source
    - graph can contain negative weights
    - can detect negative cycles
    - Intuition
        - relax all the edges N-1 times sequentially, to opmitise the dist to a destination node
        - Kind of Brute
    - Algo: 
        - initialise a 1D dist array, which denotes the dist from source to that particular node
            - dist[source] = 0
            - dist[other nodes] = inf
        - Run a loop for N-1 times on all edges (u,v)
        - if(dist[u] + wt < dist[v])
            - dist[v] = dist[u] + wt
        - At N-1th iteration, the dist table will contain the minimum path from source to all destinations
    - Slower than Dijkstra's but solves cases with negative cycles & negative weights
    - How to detect a negative cycle?
        - At N-1th iteration, all the distances to destination nodes are optimized
        - If we peorform 1 more iteration, i.e., Nth iteration, & any dist[i] reduces, 
            it means negative cycle exists
    - Why N-1 times?
        - Consider, 1->2->3->4->5
        - Say, 1 is the source, then we will compute in this order:
        - it1: dist[2] = wt[1 to 2] + dist[1]
        - it2: dist[3] = wt[2 to 3] + dist[2]
        - it3: dist[4] = wt[3 to 4] + dist[3]
        - it4: dist[5] = wt[4 to 5] + dist[4]
        - hence, in worst case, N-1 iterations is required!
    - Time Complexity: 
        - O(V * E)
    - Space Complexity:
        - O(V)
- Floyd warshall Algortihm
    - get min dist from each vertex to remaining vertices in a directed graph
    - multi source
    - for undirected graph, we can either:
        - perform Dijkstra on all nodes as sources (OR)
        - convert the undirected edge as a two way directed edge: edge (u->v) , edge (v->u)
    - Intuition
        - Brute
    - Algo: 
        - initialise a 2D array, which denotes the dist of one node to other nodes, with dist[i][i] = 0
        - Enter dist values for all given edges: node from (i) to node (j) in dist[i][j]
        - for every viaNode: 0 to N-1
            - compute dist[i][j] = min(dist[i][j], dist[i][viaNode] + dist[viaNode][j])
    - How to detect a negative cycle?
        - If dist[i][i] < 0, it means negative cycle exists
    - Time Complexity: 
        - O(N^3)
    - Space Complexity:
        - O(V * V)
- Prim's MST Algo:
    - Purpose:
        - Used to find the MST & the sum of an undirected weighted graph
    - Algo:
        - Just like Dijkstra's, but uses a visited array additionally, 
            in order to the store if the vertex has been assisgned an edge.
        - create: vis(n), edges[<pair<int,int>>], priority_queue<pair<int,pair<int,int>>>
            - dist & edge will be stored in pq
        - insert the first node in pq, with dist 0 and parent -1
        - pop out of the pq
            - if visited, continue
            else,
                - it will be the most min dist value to that node. mark vis[node] = 1
                - iterate through the adjacencies, & push into pq if not visited
    - Intuition:
        - Greedy - look for all short edges first
    - Time Complexity: 
        - O(E * logE)
- Dijoint Set Union
    - Purpose:
        - Used in dynamic graphs to find if two nodes/vertices are connected in constant time
    - Algo:
        - three functionalities:
            - findUltimateParent
            - unionBySize
            - unionByRank
        - findUltimateParent
            - it is used to find the ultimate parent of any vertex in a component
            - it uses path compression technique
            - eg to find findUltimateParent(u):
                - if ( u == parent[u] ) return u
                - else parent[u] = findUltimateParent(parent[u])
            - so next time findUltimateParent(u) can be found out in O(1)
        - unionBySize
            - initally all parent[i] = i, and size[i] = 1
            - if findUltimateParent(u) == findUltimateParent(v) it is already connected
            - else if size[findUltimateParent(u)] < size[findUltimateParent(v)]
                - parent[u] = v
                - size[v] += size[u]
            - else
                - parent[v] = u
                - size[u] += size[v]
        - unionByRank
            - initally all parent[i] = i, and rank[i] = 0
            - if findUltimateParent(u) == findUltimateParent(v) it is already connected
            - else if rank[findUltimateParent(u)] < rank[findUltimateParent(v)]
                - parent[u] = v
            - else if rank[findUltimateParent(u)] > rank[findUltimateParent(v)]
                - parent[v] = u
            - else // in case of same rank size, v get attached to u & increases rank by 1
                - rank[u]++
                - parent[v] = u
    - Time Complexity:
        - O(4 * alpha) ~ O(1)
- Kruskal's MST Algo (DSU):
    - Purpose:
        - To find the MST of a weighted undirected graph
    - Algo:
        - Sort the edges based on weights
        - traverse through each edge (u,v) in order
        - check if the u & v are connected using DSU
            - if yes, continue
            - else, do unionBySize and add the wt to overallWt
        - After traversing all edges, the wt aquired is the wt of MST 



Trees:
    - Complete BST
        - When all the level of the tree is completely filled except possibly the last level, 
            which is filled from left side. 
        - In other words all the nodes are as far left as possible in complete binary tree.
    - Balanced BST
        - binary tree in which the height of the left and right subtree of any node differ by not more than 1
    - Perfect BST
        - tree with all child nodes on the same level and each node has a left and a right child node
    - Red Black Tree (Balanced BST)
        - Binary search tree in which every node is colored with either red or black. 
        - This balance guarantees that the time complexity for operations such as insertion, deletion, 
            and searching is always O(log n), regardless of the initial shape of the tree.
        - It is a type of self balancing binary search
    - Skewed Binary Tree
        - Type of binary tree in which all the nodes have only either one child or no child.
    - Spanning tree
        - It is a tree with N nodes/vertices & N-1 edges, created from a Graph
        - N denotes the no. of vertices in the Graph
    - Minimum Spanning Tree
        - It is a spanning tree, where the sum of weights of all the edges id the most minimum


Graphs:
    - Bipartite Graph
        - A graph is bipartite if and only if it is 2-colorable, 
            (i.e. its chromatic number is less than or equal to 2)



## LEARNING
STRIVER:

Graphs
    - Types - Directed & Undirected
    - A tree is a graph
    - A graph consists of Nodes & edges
    - Given N nodes, the total no. of possible undirected graphs is 2^(N*(N-1)/2)
    - Bipartite Graph
        - Graph which can be color using 2 colors & no 2 adjacent nodes have same color
            - All graphs are Bipartite except Odd length cyclic Graphs
    - Topological Sorting
        - Applicable to a Directed Acyclic Graph only
        - Linear ordering of vertices such that if there is an edge from u to v, u appears before v
        - It can be used to find the shortest path distance in a Directed Acyclic Grpah (DAG)
            - The algorithm is better than Dijkstra for DAG alone. It cannot be used for graphs which are 
                undirected or contain cycles.
    - Shortest path in DAG with weight ~ use Topological sort
    - Shortest path in Cyclice/Acyclic Undirected graph with unit weight ~ use simple BFS
    - Shortest path in Undirected graph with no negative weights & no negative cycles ~ use Dijkstra's - using PQ
    - For single source min path dist in a directed graph containing -ve cycles & wts. ~ use Bellman Ford algo
    - For Multisource min path dist in a directed graph containing -ve cycles & wts. ~ use Floyd warshall algo


