1/4/24
Intro
    - Pizza Shop
        - 1 chef
        - how to scale orders?
            - Scalability
                - Pay more money & make him work harder - Horizontal
                    - PreProcessing
                        - Like, preparation of certain items (pizza dough) during non peak hours
                - Have a backup chef - Vertical
        - Hire more permanents chefs - 10 chefs
        - Micro Service Architecture
            - Make teams - 2 teams for Pizza & 1 for Garlic Bread
                - Pizza Team 1 - 4 chefs
                - Pizza Team 2 - 3 chefs
                - Garlic Bread Team - 3 chefs
            - Redirect items based on team's strength & assign resposibilities
        - What if elecrity gets shuts down in the shop?
            - Distributed System
                - Availability - Fault Tolerant
                - Have a backup shop with lesser number of chefs
            - Introduces need for Load Balancing the requests
        - Route orders based on certain factors. Say for a pizza order:
            - Pizza Shop 1 - PS1 
                - Most popular, hence 1 hour waiting time
                - 5 mins Preparation time
                - 10 mins delivery time
                - Overall 1h 15m
            - Pizza Shop 2 - PS2
                - 15 mins waiting time
                - 10 mins Preparation time
                - 40 mins delivery time
                - Overall 1h 5m
            - Should route to PS2
            - Intelligent teams -> make more money
        - System is Fault Tolerant & Scalable, how to make it Extensible?
            - How to make it flexible to change?
        - Say there are 4 entities in our system: Customer, Pizza shops, Load Balancer, Delivery agent
        - We can separate the resposibilities
            - Decoupling
            - Any issue with a particular entity can be attendeded to by its own manager
        - Logging & Metrics
            - Analyse, Auditing, Report, ML..
        - Extensible
            - Rewrite less code in future
            - Delivery agent need not know about what is being delivered
        - Summary:
            - Order Overload -> Recruitment
            - Complexity -> Separation of concerns
            - Mishaps -> Fault Tolerance

2/2/24
Horizontal Vs Vertical Scaling
    - 